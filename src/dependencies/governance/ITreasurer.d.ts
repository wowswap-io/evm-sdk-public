/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITreasurerInterface extends ethers.utils.Interface {
  functions: {
    "calcClaimAll(address)": FunctionFragment;
    "calcClaimAmount(address,address)": FunctionFragment;
    "claim(address,address)": FunctionFragment;
    "claimAll(address)": FunctionFragment;
    "distributeFee(address,address)": FunctionFragment;
    "effectiveWOWFarmingSpeed()": FunctionFragment;
    "getFunds(address)": FunctionFragment;
    "register(address)": FunctionFragment;
    "undistributedFee(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcClaimAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcClaimAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "claimAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distributeFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveWOWFarmingSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFunds", values: [string]): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(
    functionFragment: "undistributedFee",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcClaimAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveWOWFarmingSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "undistributedFee",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITreasurer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITreasurerInterface;

  functions: {
    calcClaimAll(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; WOWAmount: BigNumber }
    >;

    claim(
      holder: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAll(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { articles: string[]; amounts: BigNumber[] }
    >;

    register(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calcClaimAll(
    holder: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  calcClaimAmount(
    holder: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; WOWAmount: BigNumber }
  >;

  claim(
    holder: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAll(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeFee(
    token: string,
    distributionRewardReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

  getFunds(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { articles: string[]; amounts: BigNumber[] }
  >;

  register(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undistributedFee(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calcClaimAll(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; WOWAmount: BigNumber }
    >;

    claim(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAll(holder: string, overrides?: CallOverrides): Promise<void>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    getFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { articles: string[]; amounts: BigNumber[] }
    >;

    register(holder: string, overrides?: CallOverrides): Promise<void>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calcClaimAll(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      holder: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAll(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    getFunds(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcClaimAll(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      holder: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    effectiveWOWFarmingSpeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
