/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TreasurerStateInterface extends ethers.utils.Interface {
  functions: {
    "WOWFarmingSpeed()": FunctionFragment;
    "WOWIndex()": FunctionFragment;
    "articlePercentages(bytes32)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "fundVaults(address,bytes32)": FunctionFragment;
    "funds(address,bytes32)": FunctionFragment;
    "halvingBlocksCount()": FunctionFragment;
    "holderRewardIndices(address,address)": FunctionFragment;
    "holderWOWIndices(address)": FunctionFragment;
    "initialBlockNumber()": FunctionFragment;
    "lastBlockNumber()": FunctionFragment;
    "m_WOW()": FunctionFragment;
    "m_WOWBridge()": FunctionFragment;
    "m_baseWOWFarmingSpeed()": FunctionFragment;
    "m_blockTime()": FunctionFragment;
    "m_circulatingSupply()": FunctionFragment;
    "m_feeDistributionRewardPercentage()": FunctionFragment;
    "m_lendableProvider()": FunctionFragment;
    "m_networkId()": FunctionFragment;
    "m_paramGovernance()": FunctionFragment;
    "m_xWOW()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardIndices(address)": FunctionFragment;
    "totalClaimAmounts(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "WOWFarmingSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WOWIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "articlePercentages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fundVaults",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "funds",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "halvingBlocksCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holderRewardIndices",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "holderWOWIndices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "m_WOW", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "m_WOWBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_baseWOWFarmingSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_blockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_feeDistributionRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_lendableProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_networkId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_paramGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "m_xWOW", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIndices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "WOWFarmingSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WOWIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "articlePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "halvingBlocksCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderRewardIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderWOWIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_WOW", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "m_WOWBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_baseWOWFarmingSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_blockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_feeDistributionRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_lendableProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_networkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_paramGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_xWOW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class TreasurerState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasurerStateInterface;

  functions: {
    WOWFarmingSpeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    WOWIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    halvingBlocksCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_WOW(overrides?: CallOverrides): Promise<[string]>;

    m_WOWBridge(overrides?: CallOverrides): Promise<[string]>;

    m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_blockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_circulatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    m_lendableProvider(overrides?: CallOverrides): Promise<[string]>;

    m_networkId(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_paramGovernance(overrides?: CallOverrides): Promise<[string]>;

    m_xWOW(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

  WOWIndex(overrides?: CallOverrides): Promise<BigNumber>;

  articlePercentages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  fundVaults(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  funds(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  halvingBlocksCount(overrides?: CallOverrides): Promise<BigNumber>;

  holderRewardIndices(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  holderWOWIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  lastBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  m_WOW(overrides?: CallOverrides): Promise<string>;

  m_WOWBridge(overrides?: CallOverrides): Promise<string>;

  m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

  m_blockTime(overrides?: CallOverrides): Promise<BigNumber>;

  m_circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  m_feeDistributionRewardPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  m_lendableProvider(overrides?: CallOverrides): Promise<string>;

  m_networkId(overrides?: CallOverrides): Promise<BigNumber>;

  m_paramGovernance(overrides?: CallOverrides): Promise<string>;

  m_xWOW(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimAmounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    WOWIndex(overrides?: CallOverrides): Promise<BigNumber>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    halvingBlocksCount(overrides?: CallOverrides): Promise<BigNumber>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    m_WOW(overrides?: CallOverrides): Promise<string>;

    m_WOWBridge(overrides?: CallOverrides): Promise<string>;

    m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    m_blockTime(overrides?: CallOverrides): Promise<BigNumber>;

    m_circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    m_lendableProvider(overrides?: CallOverrides): Promise<string>;

    m_networkId(overrides?: CallOverrides): Promise<BigNumber>;

    m_paramGovernance(overrides?: CallOverrides): Promise<string>;

    m_xWOW(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    WOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    WOWIndex(overrides?: CallOverrides): Promise<BigNumber>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    halvingBlocksCount(overrides?: CallOverrides): Promise<BigNumber>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    m_WOW(overrides?: CallOverrides): Promise<BigNumber>;

    m_WOWBridge(overrides?: CallOverrides): Promise<BigNumber>;

    m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    m_blockTime(overrides?: CallOverrides): Promise<BigNumber>;

    m_circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    m_lendableProvider(overrides?: CallOverrides): Promise<BigNumber>;

    m_networkId(overrides?: CallOverrides): Promise<BigNumber>;

    m_paramGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    m_xWOW(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WOWFarmingSpeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WOWIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    halvingBlocksCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_WOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_WOWBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_baseWOWFarmingSpeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_blockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_circulatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_lendableProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_networkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_paramGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_xWOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
