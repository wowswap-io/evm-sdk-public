/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TreasurerInterface extends ethers.utils.Interface {
  functions: {
    "BSC()": FunctionFragment;
    "REVISION()": FunctionFragment;
    "WOWFarmingSpeed()": FunctionFragment;
    "WOWIndex()": FunctionFragment;
    "_processGovernanceShare(address,uint256)": FunctionFragment;
    "articlePercentages(bytes32)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "calcClaimAll(address)": FunctionFragment;
    "calcClaimAmount(address,address)": FunctionFragment;
    "claim(address,address)": FunctionFragment;
    "claimAll(address)": FunctionFragment;
    "distributeFee(address,address)": FunctionFragment;
    "effectiveWOWFarmingSpeed()": FunctionFragment;
    "feeDistributionRewardPercentage()": FunctionFragment;
    "fundVaults(address,bytes32)": FunctionFragment;
    "funds(address,bytes32)": FunctionFragment;
    "getFundVault(address,bytes32)": FunctionFragment;
    "getFunds(address)": FunctionFragment;
    "halvingBlocksCount()": FunctionFragment;
    "holderRewardIndices(address,address)": FunctionFragment;
    "holderWOWIndices(address)": FunctionFragment;
    "initialBlockNumber()": FunctionFragment;
    "initialize(address,address,address,address,uint256,uint256)": FunctionFragment;
    "lastBlockNumber()": FunctionFragment;
    "lendableProvider()": FunctionFragment;
    "m_WOW()": FunctionFragment;
    "m_WOWBridge()": FunctionFragment;
    "m_baseWOWFarmingSpeed()": FunctionFragment;
    "m_blockTime()": FunctionFragment;
    "m_circulatingSupply()": FunctionFragment;
    "m_feeDistributionRewardPercentage()": FunctionFragment;
    "m_lendableProvider()": FunctionFragment;
    "m_networkId()": FunctionFragment;
    "m_paramGovernance()": FunctionFragment;
    "m_xWOW()": FunctionFragment;
    "owner()": FunctionFragment;
    "register(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardIndices(address)": FunctionFragment;
    "setFeeDistributionRewardPercentage(uint256)": FunctionFragment;
    "setFundVault(address,bytes32,address)": FunctionFragment;
    "setLendableProvider(address)": FunctionFragment;
    "setParamGovernance(address)": FunctionFragment;
    "setWOWBridge(address)": FunctionFragment;
    "setupWOWFarming(uint256,uint256,uint256,uint256)": FunctionFragment;
    "sweepAllFunds()": FunctionFragment;
    "sweepAllFundsForToken(address)": FunctionFragment;
    "sweepFundForToken(address,bytes32)": FunctionFragment;
    "totalClaimAmounts(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "undistributedFee(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BSC", values?: undefined): string;
  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WOWFarmingSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WOWIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_processGovernanceShare",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "articlePercentages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcClaimAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcClaimAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "claimAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distributeFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveWOWFarmingSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributionRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundVaults",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "funds",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundVault",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "halvingBlocksCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holderRewardIndices",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "holderWOWIndices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendableProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "m_WOW", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "m_WOWBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_baseWOWFarmingSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_blockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_feeDistributionRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_lendableProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_networkId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_paramGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "m_xWOW", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIndices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributionRewardPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundVault",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendableProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setParamGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWOWBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupWOWFarming",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepAllFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepAllFundsForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepFundForToken",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "undistributedFee",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BSC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WOWFarmingSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WOWIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_processGovernanceShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "articlePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcClaimAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveWOWFarmingSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributionRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFundVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "halvingBlocksCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderRewardIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderWOWIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendableProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_WOW", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "m_WOWBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_baseWOWFarmingSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_blockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_feeDistributionRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_lendableProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_networkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "m_paramGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_xWOW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributionRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendableProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParamGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWOWBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupWOWFarming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepAllFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepAllFundsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepFundForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undistributedFee",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Treasurer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasurerInterface;

  functions: {
    BSC(overrides?: CallOverrides): Promise<[BigNumber]>;

    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    WOWFarmingSpeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    WOWIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    _processGovernanceShare(
      token: string,
      governanceShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calcClaimAll(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; WOWAmount: BigNumber }
    >;

    claim(
      holder: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAll(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundVault(
      token: string,
      article: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    getFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { names: string[]; amounts: BigNumber[] }
    >;

    halvingBlocksCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _WOW: string,
      _xWOW: string,
      _lendableProvider: string,
      _paramGovernance: string,
      _wowFarmingSpeed: BigNumberish,
      _halvingBlocksCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    lendableProvider(overrides?: CallOverrides): Promise<[string]>;

    m_WOW(overrides?: CallOverrides): Promise<[string]>;

    m_WOWBridge(overrides?: CallOverrides): Promise<[string]>;

    m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_blockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_circulatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    m_lendableProvider(overrides?: CallOverrides): Promise<[string]>;

    m_networkId(overrides?: CallOverrides): Promise<[BigNumber]>;

    m_paramGovernance(overrides?: CallOverrides): Promise<[string]>;

    m_xWOW(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    register(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFeeDistributionRewardPercentage(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundVault(
      token: string,
      article: BytesLike,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendableProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWOWBridge(
      wowBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupWOWFarming(
      networkId: BigNumberish,
      blockTime: BigNumberish,
      baseWOWFarmingSpeed: BigNumberish,
      circulatingSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepAllFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepAllFundsForToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepFundForToken(
      token: string,
      article: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BSC(overrides?: CallOverrides): Promise<BigNumber>;

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  WOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

  WOWIndex(overrides?: CallOverrides): Promise<BigNumber>;

  _processGovernanceShare(
    token: string,
    governanceShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  articlePercentages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcClaimAll(
    holder: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  calcClaimAmount(
    holder: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; WOWAmount: BigNumber }
  >;

  claim(
    holder: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAll(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeFee(
    token: string,
    distributionRewardReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

  feeDistributionRewardPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundVaults(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  funds(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundVault(
    token: string,
    article: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getFunds(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { names: string[]; amounts: BigNumber[] }
  >;

  halvingBlocksCount(overrides?: CallOverrides): Promise<BigNumber>;

  holderRewardIndices(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  holderWOWIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _WOW: string,
    _xWOW: string,
    _lendableProvider: string,
    _paramGovernance: string,
    _wowFarmingSpeed: BigNumberish,
    _halvingBlocksCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  lendableProvider(overrides?: CallOverrides): Promise<string>;

  m_WOW(overrides?: CallOverrides): Promise<string>;

  m_WOWBridge(overrides?: CallOverrides): Promise<string>;

  m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

  m_blockTime(overrides?: CallOverrides): Promise<BigNumber>;

  m_circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  m_feeDistributionRewardPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  m_lendableProvider(overrides?: CallOverrides): Promise<string>;

  m_networkId(overrides?: CallOverrides): Promise<BigNumber>;

  m_paramGovernance(overrides?: CallOverrides): Promise<string>;

  m_xWOW(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  register(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setFeeDistributionRewardPercentage(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundVault(
    token: string,
    article: BytesLike,
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendableProvider(
    provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParamGovernance(
    paramGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWOWBridge(
    wowBridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupWOWFarming(
    networkId: BigNumberish,
    blockTime: BigNumberish,
    baseWOWFarmingSpeed: BigNumberish,
    circulatingSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepAllFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepAllFundsForToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepFundForToken(
    token: string,
    article: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalClaimAmounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undistributedFee(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BSC(overrides?: CallOverrides): Promise<BigNumber>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    WOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    WOWIndex(overrides?: CallOverrides): Promise<BigNumber>;

    _processGovernanceShare(
      token: string,
      governanceShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcClaimAll(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; WOWAmount: BigNumber }
    >;

    claim(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAll(holder: string, overrides?: CallOverrides): Promise<void>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundVault(
      token: string,
      article: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { names: string[]; amounts: BigNumber[] }
    >;

    halvingBlocksCount(overrides?: CallOverrides): Promise<BigNumber>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _WOW: string,
      _xWOW: string,
      _lendableProvider: string,
      _paramGovernance: string,
      _wowFarmingSpeed: BigNumberish,
      _halvingBlocksCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lendableProvider(overrides?: CallOverrides): Promise<string>;

    m_WOW(overrides?: CallOverrides): Promise<string>;

    m_WOWBridge(overrides?: CallOverrides): Promise<string>;

    m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    m_blockTime(overrides?: CallOverrides): Promise<BigNumber>;

    m_circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    m_lendableProvider(overrides?: CallOverrides): Promise<string>;

    m_networkId(overrides?: CallOverrides): Promise<BigNumber>;

    m_paramGovernance(overrides?: CallOverrides): Promise<string>;

    m_xWOW(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    register(holder: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFeeDistributionRewardPercentage(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundVault(
      token: string,
      article: BytesLike,
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendableProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWOWBridge(wowBridge: string, overrides?: CallOverrides): Promise<void>;

    setupWOWFarming(
      networkId: BigNumberish,
      blockTime: BigNumberish,
      baseWOWFarmingSpeed: BigNumberish,
      circulatingSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepAllFunds(overrides?: CallOverrides): Promise<void>;

    sweepAllFundsForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepFundForToken(
      token: string,
      article: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    BSC(overrides?: CallOverrides): Promise<BigNumber>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    WOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    WOWIndex(overrides?: CallOverrides): Promise<BigNumber>;

    _processGovernanceShare(
      token: string,
      governanceShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcClaimAll(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      holder: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAll(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    effectiveWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundVault(
      token: string,
      article: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFunds(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    halvingBlocksCount(overrides?: CallOverrides): Promise<BigNumber>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _WOW: string,
      _xWOW: string,
      _lendableProvider: string,
      _paramGovernance: string,
      _wowFarmingSpeed: BigNumberish,
      _halvingBlocksCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lendableProvider(overrides?: CallOverrides): Promise<BigNumber>;

    m_WOW(overrides?: CallOverrides): Promise<BigNumber>;

    m_WOWBridge(overrides?: CallOverrides): Promise<BigNumber>;

    m_baseWOWFarmingSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    m_blockTime(overrides?: CallOverrides): Promise<BigNumber>;

    m_circulatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    m_lendableProvider(overrides?: CallOverrides): Promise<BigNumber>;

    m_networkId(overrides?: CallOverrides): Promise<BigNumber>;

    m_paramGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    m_xWOW(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardIndices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFeeDistributionRewardPercentage(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundVault(
      token: string,
      article: BytesLike,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendableProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWOWBridge(
      wowBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupWOWFarming(
      networkId: BigNumberish,
      blockTime: BigNumberish,
      baseWOWFarmingSpeed: BigNumberish,
      circulatingSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepAllFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepAllFundsForToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepFundForToken(
      token: string,
      article: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BSC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WOWFarmingSpeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WOWIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _processGovernanceShare(
      token: string,
      governanceShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    articlePercentages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcClaimAll(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcClaimAmount(
      holder: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      holder: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeFee(
      token: string,
      distributionRewardReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    effectiveWOWFarmingSpeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundVaults(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    funds(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundVault(
      token: string,
      article: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    halvingBlocksCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderRewardIndices(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderWOWIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _WOW: string,
      _xWOW: string,
      _lendableProvider: string,
      _paramGovernance: string,
      _wowFarmingSpeed: BigNumberish,
      _halvingBlocksCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendableProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_WOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_WOWBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_baseWOWFarmingSpeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_blockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_circulatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_feeDistributionRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_lendableProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_networkId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_paramGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_xWOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardIndices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeDistributionRewardPercentage(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundVault(
      token: string,
      article: BytesLike,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendableProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParamGovernance(
      paramGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWOWBridge(
      wowBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupWOWFarming(
      networkId: BigNumberish,
      blockTime: BigNumberish,
      baseWOWFarmingSpeed: BigNumberish,
      circulatingSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepAllFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepAllFundsForToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepFundForToken(
      token: string,
      article: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalClaimAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undistributedFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
