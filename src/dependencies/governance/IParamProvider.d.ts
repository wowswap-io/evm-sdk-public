/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IParamProviderInterface extends ethers.utils.Interface {
  functions: {
    "baseBorrowRate()": FunctionFragment;
    "excessSlope()": FunctionFragment;
    "liquidationMargin()": FunctionFragment;
    "liquidationReward()": FunctionFragment;
    "maxLeverageFactor()": FunctionFragment;
    "maxLiquidationReward()": FunctionFragment;
    "maxPriceThreshold()": FunctionFragment;
    "maxRateMultiplier()": FunctionFragment;
    "minPositionDeposit()": FunctionFragment;
    "minWOWBalance(uint256)": FunctionFragment;
    "optimalSlope()": FunctionFragment;
    "optimalUtilization()": FunctionFragment;
    "poolUtilizationAllowance()": FunctionFragment;
    "priceGuard()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "traderProfitFee()": FunctionFragment;
    "treasureFactor()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excessSlope",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLeverageFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRateMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWOWBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optimalSlope",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimalUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolUtilizationAllowance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderProfitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasureFactor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "baseBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWOWBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolUtilizationAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traderProfitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasureFactor",
    data: BytesLike
  ): Result;

  events: {};
}

export class IParamProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IParamProviderInterface;

  functions: {
    baseBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    excessSlope(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPriceThreshold(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPositionDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optimalSlope(overrides?: CallOverrides): Promise<[BigNumber]>;

    optimalUtilization(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceGuard(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    traderProfitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasureFactor(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceThreshold(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  minWOWBalance(
    leverageFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

  optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

  poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  priceGuard(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

  treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    priceGuard(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceThreshold(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    priceGuard(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excessSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidationReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceThreshold(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPositionDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimalSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimalUtilization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolUtilizationAllowance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traderProfitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasureFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
