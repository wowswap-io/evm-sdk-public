/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ParamGovernanceV2Interface extends ethers.utils.Interface {
  functions: {
    "REVISION()": FunctionFragment;
    "getAddress(bytes32)": FunctionFragment;
    "getFeeDistribution()": FunctionFragment;
    "getParam(bytes32)": FunctionFragment;
    "getParams()": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revote(address)": FunctionFragment;
    "setAddress(bytes32,address)": FunctionFragment;
    "setParamBounds(bytes32,uint256,uint256)": FunctionFragment;
    "setParamsBounds(bytes32[],uint256[],uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "voteForFeeDistribution(address,tuple)": FunctionFragment;
    "voteForParam(address,bytes32,uint256)": FunctionFragment;
    "voteForParams(address,bytes32[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getParam", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getParams", values?: undefined): string;
  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setParamBounds",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParamsBounds",
    values: [BytesLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForFeeDistribution",
    values: [
      string,
      {
        automaticReward: BigNumberish;
        manualReward: BigNumberish;
        development: BigNumberish;
        insurance: BigNumberish;
        charity: BigNumberish;
        buyAndBurn: BigNumberish;
        feeDistributionReward: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForParam",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForParams",
    values: [string, BytesLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParamBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParamsBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForParams",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ParamGovernanceV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ParamGovernanceV2Interface;

  functions: {
    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getFeeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { funds: string[]; percentages: BigNumber[] }
    >;

    getParam(param: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    getParams(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          name: string;
          value: BigNumber;
          amount: BigNumber;
          minValue: BigNumber;
          maxValue: BigNumber;
        })[]
      ] & {
        parameters: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          name: string;
          value: BigNumber;
          amount: BigNumber;
          minValue: BigNumber;
          maxValue: BigNumber;
        })[];
      }
    >;

    getVotes(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { names: string[]; values: BigNumber[] }
    >;

    initialize(
      _xWOW: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revote(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      name: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParamBounds(
      parameter: BytesLike,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParamsBounds(
      parameters: BytesLike[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteForFeeDistribution(
      holder: string,
      distribution: {
        automaticReward: BigNumberish;
        manualReward: BigNumberish;
        development: BigNumberish;
        insurance: BigNumberish;
        charity: BigNumberish;
        buyAndBurn: BigNumberish;
        feeDistributionReward: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteForParam(
      holder: string,
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteForParams(
      holder: string,
      names: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

  getFeeDistribution(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { funds: string[]; percentages: BigNumber[] }
  >;

  getParam(param: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getParams(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      value: BigNumber;
      amount: BigNumber;
      minValue: BigNumber;
      maxValue: BigNumber;
    })[]
  >;

  getVotes(
    holder: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { names: string[]; values: BigNumber[] }
  >;

  initialize(
    _xWOW: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revote(
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    name: BytesLike,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParamBounds(
    parameter: BytesLike,
    minValue: BigNumberish,
    maxValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParamsBounds(
    parameters: BytesLike[],
    minValues: BigNumberish[],
    maxValues: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteForFeeDistribution(
    holder: string,
    distribution: {
      automaticReward: BigNumberish;
      manualReward: BigNumberish;
      development: BigNumberish;
      insurance: BigNumberish;
      charity: BigNumberish;
      buyAndBurn: BigNumberish;
      feeDistributionReward: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteForParam(
    holder: string,
    name: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteForParams(
    holder: string,
    names: BytesLike[],
    values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

    getFeeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { funds: string[]; percentages: BigNumber[] }
    >;

    getParam(param: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getParams(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        value: BigNumber;
        amount: BigNumber;
        minValue: BigNumber;
        maxValue: BigNumber;
      })[]
    >;

    getVotes(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { names: string[]; values: BigNumber[] }
    >;

    initialize(_xWOW: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revote(holder: string, overrides?: CallOverrides): Promise<void>;

    setAddress(
      name: BytesLike,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setParamBounds(
      parameter: BytesLike,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParamsBounds(
      parameters: BytesLike[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voteForFeeDistribution(
      holder: string,
      distribution: {
        automaticReward: BigNumberish;
        manualReward: BigNumberish;
        development: BigNumberish;
        insurance: BigNumberish;
        charity: BigNumberish;
        buyAndBurn: BigNumberish;
        feeDistributionReward: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    voteForParam(
      holder: string,
      name: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteForParams(
      holder: string,
      names: BytesLike[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getFeeDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    getParam(param: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getParams(overrides?: CallOverrides): Promise<BigNumber>;

    getVotes(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _xWOW: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revote(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddress(
      name: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParamBounds(
      parameter: BytesLike,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParamsBounds(
      parameters: BytesLike[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteForFeeDistribution(
      holder: string,
      distribution: {
        automaticReward: BigNumberish;
        manualReward: BigNumberish;
        development: BigNumberish;
        insurance: BigNumberish;
        charity: BigNumberish;
        buyAndBurn: BigNumberish;
        feeDistributionReward: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteForParam(
      holder: string,
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteForParams(
      holder: string,
      names: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParam(
      param: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotes(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _xWOW: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revote(
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      name: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParamBounds(
      parameter: BytesLike,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParamsBounds(
      parameters: BytesLike[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteForFeeDistribution(
      holder: string,
      distribution: {
        automaticReward: BigNumberish;
        manualReward: BigNumberish;
        development: BigNumberish;
        insurance: BigNumberish;
        charity: BigNumberish;
        buyAndBurn: BigNumberish;
        feeDistributionReward: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteForParam(
      holder: string,
      name: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteForParams(
      holder: string,
      names: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
