/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IPancakeCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeCallee__factory>;
    getContractFactory(
      name: "IPancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeERC20__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "PancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeERC20__factory>;
    getContractFactory(
      name: "PancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeFactory__factory>;
    getContractFactory(
      name: "PancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakePair__factory>;
    getContractFactory(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPoint__factory>;
    getContractFactory(
      name: "IPancakeMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeMigrator__factory>;
    getContractFactory(
      name: "IPancakeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter01__factory>;
    getContractFactory(
      name: "IPancakeRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IUniswapV1Exchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV1Exchange__factory>;
    getContractFactory(
      name: "IUniswapV1Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV1Factory__factory>;
    getContractFactory(
      name: "PancakeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeRouter__factory>;
    getContractFactory(
      name: "PancakeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeRouter01__factory>;
    getContractFactory(
      name: "BuyBack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BuyBack__factory>;
    getContractFactory(
      name: "BuyBackState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BuyBackState__factory>;
    getContractFactory(
      name: "GovernanceErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceErrors__factory>;
    getContractFactory(
      name: "ParamGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParamGovernance__factory>;
    getContractFactory(
      name: "ParamGovernanceState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParamGovernanceState__factory>;
    getContractFactory(
      name: "Treasurer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Treasurer__factory>;
    getContractFactory(
      name: "TreasurerState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TreasurerState__factory>;
    getContractFactory(
      name: "XWOW",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XWOW__factory>;
    getContractFactory(
      name: "XWOWState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XWOWState__factory>;
    getContractFactory(
      name: "IBuyBack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBuyBack__factory>;
    getContractFactory(
      name: "ILendableProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendableProvider__factory>;
    getContractFactory(
      name: "IParamGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IParamGovernance__factory>;
    getContractFactory(
      name: "IParamProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IParamProvider__factory>;
    getContractFactory(
      name: "ITreasurer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITreasurer__factory>;
    getContractFactory(
      name: "IVersioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersioned__factory>;
    getContractFactory(
      name: "IxWOW",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IxWOW__factory>;
    getContractFactory(
      name: "MockLendableProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLendableProvider__factory>;
    getContractFactory(
      name: "MockParamGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockParamGovernance__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "MockXWOW",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockXWOW__factory>;
    getContractFactory(
      name: "ParamGovernanceStateV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParamGovernanceStateV2__factory>;
    getContractFactory(
      name: "ParamGovernanceV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParamGovernanceV2__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
