/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IParamGovernance,
  IParamGovernanceInterface,
} from "../IParamGovernance";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeDistribution",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "funds",
        type: "bytes32[]",
      },
      {
        internalType: "uint256[]",
        name: "percentages",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
    ],
    name: "getParam",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getParams",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "name",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxValue",
            type: "uint256",
          },
        ],
        internalType: "struct ParameterView[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
    ],
    name: "getVotes",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "names",
        type: "bytes32[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
    ],
    name: "revote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "setAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parameter",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "minValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxValue",
        type: "uint256",
      },
    ],
    name: "setParamBounds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "parameters",
        type: "bytes32[]",
      },
      {
        internalType: "uint256[]",
        name: "minValues",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "maxValues",
        type: "uint256[]",
      },
    ],
    name: "setParamsBounds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "governanceReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "development",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "insurance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "charity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyAndBurn",
            type: "uint256",
          },
        ],
        internalType: "struct Funds.FeeDistribution",
        name: "distribution",
        type: "tuple",
      },
    ],
    name: "voteForFeeDistribution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "voteForParam",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "names",
        type: "bytes32[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "voteForParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xWOW",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IParamGovernance__factory {
  static readonly abi = _abi;
  static createInterface(): IParamGovernanceInterface {
    return new utils.Interface(_abi) as IParamGovernanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IParamGovernance {
    return new Contract(address, _abi, signerOrProvider) as IParamGovernance;
  }
}
