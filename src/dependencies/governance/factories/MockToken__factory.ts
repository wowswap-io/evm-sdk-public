/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockToken, MockTokenInterface } from "../MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "tokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "dec",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200127738038062001277833981810160405260808110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b50604090815260208281015192909101518651929450925085918591620001c591600391850190620003a0565b508051620001db906004906020840190620003a0565b50506005805460ff1916601217905550620001f68262000214565b6200020a3360ff8416600a0a83026200022a565b505050506200044c565b6005805460ff191660ff92909216919091179055565b6001600160a01b03821662000286576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b620002946000838362000339565b620002b0816002546200033e60201b6200072b1790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002e39183906200072b6200033e821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008282018381101562000399576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620003d8576000855562000423565b82601f10620003f357805160ff191683800117855562000423565b8280016001018555821562000423579182015b828111156200042357825182559160200191906001019062000406565b506200043192915062000435565b5090565b5b8082111562000431576000815560010162000436565b610e1b806200045c6000396000f3fe6080604052600436106100dd5760003560e01c806340c10f191161007f578063a457c2d711610059578063a457c2d714610334578063a9059cbb1461036d578063d0e30db0146103a6578063dd62ed3e146103ae576100dd565b806340c10f19146102b357806370a08231146102ec57806395d89b411461031f576100dd565b806323b872dd116100bb57806323b872dd146101e05780632e1a7d4d14610223578063313ce5671461024f578063395093511461027a576100dd565b806306fdde03146100e2578063095ea7b31461016c57806318160ddd146101b9575b600080fd5b3480156100ee57600080fd5b506100f76103e9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017857600080fd5b506101a56004803603604081101561018f57600080fd5b506001600160a01b03813516906020013561047f565b604080519115158252519081900360200190f35b3480156101c557600080fd5b506101ce61049c565b60408051918252519081900360200190f35b3480156101ec57600080fd5b506101a56004803603606081101561020357600080fd5b506001600160a01b038135811691602081013590911690604001356104a2565b34801561022f57600080fd5b5061024d6004803603602081101561024657600080fd5b5035610529565b005b34801561025b57600080fd5b5061026461059b565b6040805160ff9092168252519081900360200190f35b34801561028657600080fd5b506101a56004803603604081101561029d57600080fd5b506001600160a01b0381351690602001356105a4565b3480156102bf57600080fd5b5061024d600480360360408110156102d657600080fd5b506001600160a01b0381351690602001356105f2565b3480156102f857600080fd5b506101ce6004803603602081101561030f57600080fd5b50356001600160a01b03166105fc565b34801561032b57600080fd5b506100f7610617565b34801561034057600080fd5b506101a56004803603604081101561035757600080fd5b506001600160a01b038135169060200135610678565b34801561037957600080fd5b506101a56004803603604081101561039057600080fd5b506001600160a01b0381351690602001356106e0565b61024d6106f4565b3480156103ba57600080fd5b506101ce600480360360408110156103d157600080fd5b506001600160a01b0381358116916020013516610700565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b600061049361048c61078c565b8484610790565b50600192915050565b60025490565b60006104af84848461087c565b61051f846104bb61078c565b61051a85604051806060016040528060288152602001610d2f602891396001600160a01b038a166000908152600160205260408120906104f961078c565b6001600160a01b0316815260208101919091526040016000205491906109d7565b610790565b5060019392505050565b80610533336105fc565b1015610560576040805162461bcd60e51b8152602060048201526000602482015290519081900360640190fd5b61056a3382610a6e565b604051339082156108fc029083906000818181858888f19350505050158015610597573d6000803e3d6000fd5b5050565b60055460ff1690565b60006104936105b161078c565b8461051a85600160006105c261078c565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061072b565b6105978282610b6a565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104755780601f1061044a57610100808354040283529160200191610475565b600061049361068561078c565b8461051a85604051806060016040528060258152602001610dc160259139600160006106af61078c565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906109d7565b60006104936106ed61078c565b848461087c565b6106fe3334610b6a565b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600082820183811015610785576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b0383166107d55760405162461bcd60e51b8152600401808060200182810382526024815260200180610d9d6024913960400191505060405180910390fd5b6001600160a01b03821661081a5760405162461bcd60e51b8152600401808060200182810382526022815260200180610ce76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166108c15760405162461bcd60e51b8152600401808060200182810382526025815260200180610d786025913960400191505060405180910390fd5b6001600160a01b0382166109065760405162461bcd60e51b8152600401808060200182810382526023815260200180610ca26023913960400191505060405180910390fd5b610911838383610c5a565b61094e81604051806060016040528060268152602001610d09602691396001600160a01b03861660009081526020819052604090205491906109d7565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461097d908261072b565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610a665760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a2b578181015183820152602001610a13565b50505050905090810190601f168015610a585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216610ab35760405162461bcd60e51b8152600401808060200182810382526021815260200180610d576021913960400191505060405180910390fd5b610abf82600083610c5a565b610afc81604051806060016040528060228152602001610cc5602291396001600160a01b03851660009081526020819052604090205491906109d7565b6001600160a01b038316600090815260208190526040902055600254610b229082610c5f565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610bc5576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610bd160008383610c5a565b600254610bde908261072b565b6002556001600160a01b038216600090815260208190526040902054610c04908261072b565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b600061078583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506109d756fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122034876021bd49d4927013bc2526a681093b7ed352b2039525351d92dff5a6eb0564736f6c63430007040033";

export class MockToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    tokenName: string,
    tokenSymbol: string,
    dec: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockToken> {
    return super.deploy(
      tokenName,
      tokenSymbol,
      dec,
      supply,
      overrides || {}
    ) as Promise<MockToken>;
  }
  getDeployTransaction(
    tokenName: string,
    tokenSymbol: string,
    dec: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenName,
      tokenSymbol,
      dec,
      supply,
      overrides || {}
    );
  }
  attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
