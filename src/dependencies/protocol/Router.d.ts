/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RouterInterface extends ethers.utils.Interface {
  functions: {
    "REVISION()": FunctionFragment;
    "WETH()": FunctionFragment;
    "calculateBalance(address,address,address,uint256)": FunctionFragment;
    "calculateOpenPosition(address,address,uint256,uint256)": FunctionFragment;
    "calculateOpenProxyPosition(address,address,address,uint256,uint256)": FunctionFragment;
    "calculateOpenProxyShortPosition(address,address,address,uint256,uint256)": FunctionFragment;
    "calculateOpenShortPosition(address,address,uint256,uint256)": FunctionFragment;
    "calculateProxyBalance(address,address,address,address,uint256)": FunctionFragment;
    "calculateProxyShortBalance(address,address,address,address,uint256)": FunctionFragment;
    "calculateShortBalance(address,address,address,uint256)": FunctionFragment;
    "closePosition((bool,uint256,uint256,address,address,address,address,uint256,address,(uint8,bytes32,bytes32),bool))": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "depositETH(address)": FunctionFragment;
    "depositShortable(address,uint256,address)": FunctionFragment;
    "fill(address,uint256)": FunctionFragment;
    "getPosition(address,address,address)": FunctionFragment;
    "getProxyPosition(address,address,address,address)": FunctionFragment;
    "getProxyShortPosition(address,address,address,address)": FunctionFragment;
    "getShortPosition(address,address,address)": FunctionFragment;
    "incentivize(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "openPosition((uint256,uint256,uint256,address,address,address,address,uint256,address,(uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32)),(uint256,uint256,uint256,(uint8,bytes32,bytes32)),uint256,bool))": FunctionFragment;
    "openShortPosition((uint256,uint256,uint256,uint256,address,address,address,address,uint256,address,(uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32)),(uint256,uint256,uint256,(uint8,bytes32,bytes32)),uint256,bool))": FunctionFragment;
    "pairFactory()": FunctionFragment;
    "reserveFactory()": FunctionFragment;
    "stake(address,uint256,uint16,address)": FunctionFragment;
    "swapFactory()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "sweepReserveFee(address)": FunctionFragment;
    "sweepShortingReserveFee(address)": FunctionFragment;
    "unstake(address,address)": FunctionFragment;
    "withdraw((address,uint256,address,uint256,(uint8,bytes32,bytes32),bool))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateBalance",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOpenPosition",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOpenProxyPosition",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOpenProxyShortPosition",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOpenShortPosition",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProxyBalance",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProxyShortBalance",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateShortBalance",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      {
        short: boolean;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "depositETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositShortable",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fill",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyPosition",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyShortPosition",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      {
        amountIn: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortPosition",
    values: [
      {
        amountIn: BigNumberish;
        baseBorrowAmount: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepReserveFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepShortingReserveFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      {
        token: string;
        amount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOpenProxyPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOpenProxyShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOpenShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProxyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProxyShortBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateShortBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositShortable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepReserveFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepShortingReserveFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RouterInterface;

  functions: {
    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    calculateBalance(
      lendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateOpenPosition(
      lendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateOpenProxyPosition(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateOpenProxyShortPosition(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateOpenShortPosition(
      lendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateProxyBalance(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateProxyShortBalance(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateShortBalance(
      lendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      request: {
        short: boolean;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      lendable: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositShortable(
      shortable: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fill(
      lendable: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPosition(
      trader: string,
      lendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProxyPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProxyShortPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getShortPosition(
      trader: string,
      lendable: string,
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    incentivize(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _reserveFactory: string,
      _pairFactory: string,
      _swapRouter: string,
      _WETH: string,
      _xWOW: string,
      _referralProgram: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      request: {
        amountIn: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openShortPosition(
      request: {
        amountIn: BigNumberish;
        baseBorrowAmount: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pairFactory(overrides?: CallOverrides): Promise<[string]>;

    reserveFactory(overrides?: CallOverrides): Promise<[string]>;

    stake(
      token: string,
      amount: BigNumberish,
      period: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFactory(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    sweepReserveFee(
      lendable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepShortingReserveFee(
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      request: {
        token: string;
        amount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  calculateBalance(
    lendable: string,
    tradable: string,
    trader: string,
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateOpenPosition(
    lendable: string,
    tradable: string,
    amount: BigNumberish,
    leverageFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateOpenProxyPosition(
    lendable: string,
    proxyLendable: string,
    tradable: string,
    amount: BigNumberish,
    leverageFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateOpenProxyShortPosition(
    lendable: string,
    proxyLendable: string,
    shortable: string,
    amount: BigNumberish,
    leverageFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateOpenShortPosition(
    lendable: string,
    shortable: string,
    amount: BigNumberish,
    leverageFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateProxyBalance(
    lendable: string,
    proxyLendable: string,
    tradable: string,
    trader: string,
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateProxyShortBalance(
    lendable: string,
    proxyLendable: string,
    shortable: string,
    trader: string,
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateShortBalance(
    lendable: string,
    shortable: string,
    trader: string,
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    request: {
      short: boolean;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      lendable: string;
      proxy: string;
      tradable: string;
      trader: string;
      deadline: BigNumberish;
      referrer: string;
      permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
      convertToNative: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    lendable: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositShortable(
    shortable: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fill(
    lendable: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPosition(
    trader: string,
    lendable: string,
    tradable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProxyPosition(
    trader: string,
    lendable: string,
    proxyLendable: string,
    tradable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProxyShortPosition(
    trader: string,
    lendable: string,
    proxyLendable: string,
    shortable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getShortPosition(
    trader: string,
    lendable: string,
    shortable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  incentivize(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _reserveFactory: string,
    _pairFactory: string,
    _swapRouter: string,
    _WETH: string,
    _xWOW: string,
    _referralProgram: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    request: {
      amountIn: BigNumberish;
      leverageFactor: BigNumberish;
      amountOutMin: BigNumberish;
      lendable: string;
      proxy: string;
      tradable: string;
      trader: string;
      deadline: BigNumberish;
      referrer: string;
      guardedPrice: {
        minDeposit: BigNumberish;
        minPrice: BigNumberish;
        maxPrice: BigNumberish;
        deadline: BigNumberish;
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
      };
      terminationConditions: {
        stopLossPercentage: BigNumberish;
        takeProfitPercentage: BigNumberish;
        deadline: BigNumberish;
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
      };
      terminationReward: BigNumberish;
      convertFromNative: boolean;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openShortPosition(
    request: {
      amountIn: BigNumberish;
      baseBorrowAmount: BigNumberish;
      leverageFactor: BigNumberish;
      amountOutMin: BigNumberish;
      lendable: string;
      proxy: string;
      tradable: string;
      trader: string;
      deadline: BigNumberish;
      referrer: string;
      guardedPrice: {
        minDeposit: BigNumberish;
        minPrice: BigNumberish;
        maxPrice: BigNumberish;
        deadline: BigNumberish;
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
      };
      terminationConditions: {
        stopLossPercentage: BigNumberish;
        takeProfitPercentage: BigNumberish;
        deadline: BigNumberish;
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
      };
      terminationReward: BigNumberish;
      convertFromNative: boolean;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pairFactory(overrides?: CallOverrides): Promise<string>;

  reserveFactory(overrides?: CallOverrides): Promise<string>;

  stake(
    token: string,
    amount: BigNumberish,
    period: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFactory(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  sweepReserveFee(
    lendable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepShortingReserveFee(
    shortable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    request: {
      token: string;
      amount: BigNumberish;
      to: string;
      deadline: BigNumberish;
      permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
      convertToNative: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    calculateBalance(
      lendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    calculateOpenPosition(
      lendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    calculateOpenProxyPosition(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    calculateOpenProxyShortPosition(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    calculateOpenShortPosition(
      lendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        maxAmountIn: BigNumber;
        borrowAmount: BigNumber;
        borrowRate: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    calculateProxyBalance(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    calculateProxyShortBalance(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    calculateShortBalance(
      lendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountOut: BigNumber;
        profit: BigNumber;
        debtPayable: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    closePosition(
      request: {
        short: boolean;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      lendable: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(to: string, overrides?: CallOverrides): Promise<void>;

    depositShortable(
      shortable: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fill(
      lendable: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPosition(
      trader: string,
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        amount: BigNumber;
        value: BigNumber;
        selfValue: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        rate: BigNumber;
        currentCost: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    getProxyPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        amount: BigNumber;
        value: BigNumber;
        selfValue: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        rate: BigNumber;
        currentCost: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    getProxyShortPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      shortable: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        amount: BigNumber;
        value: BigNumber;
        selfValue: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        rate: BigNumber;
        currentCost: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    getShortPosition(
      trader: string,
      lendable: string,
      shortable: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        }
      ] & {
        amount: BigNumber;
        value: BigNumber;
        selfValue: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        rate: BigNumber;
        currentCost: BigNumber;
        liquidationCost: BigNumber;
        terminationConditions: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          expirationDate: BigNumber;
          stopLossPercentage: BigNumber;
          takeProfitPercentage: BigNumber;
          terminationReward: BigNumber;
        };
      }
    >;

    incentivize(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _reserveFactory: string,
      _pairFactory: string,
      _swapRouter: string,
      _WETH: string,
      _xWOW: string,
      _referralProgram: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      request: {
        amountIn: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openShortPosition(
      request: {
        amountIn: BigNumberish;
        baseBorrowAmount: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairFactory(overrides?: CallOverrides): Promise<string>;

    reserveFactory(overrides?: CallOverrides): Promise<string>;

    stake(
      token: string,
      amount: BigNumberish,
      period: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapFactory(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    sweepReserveFee(lendable: string, overrides?: CallOverrides): Promise<void>;

    sweepShortingReserveFee(
      shortable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      token: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      request: {
        token: string;
        amount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    calculateBalance(
      lendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateOpenPosition(
      lendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateOpenProxyPosition(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateOpenProxyShortPosition(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateOpenShortPosition(
      lendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateProxyBalance(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateProxyShortBalance(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateShortBalance(
      lendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      request: {
        short: boolean;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      lendable: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositShortable(
      shortable: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fill(
      lendable: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPosition(
      trader: string,
      lendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProxyPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProxyShortPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getShortPosition(
      trader: string,
      lendable: string,
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    incentivize(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _reserveFactory: string,
      _pairFactory: string,
      _swapRouter: string,
      _WETH: string,
      _xWOW: string,
      _referralProgram: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPosition(
      request: {
        amountIn: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openShortPosition(
      request: {
        amountIn: BigNumberish;
        baseBorrowAmount: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pairFactory(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFactory(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      token: string,
      amount: BigNumberish,
      period: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    sweepReserveFee(
      lendable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepShortingReserveFee(
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      request: {
        token: string;
        amount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateBalance(
      lendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateOpenPosition(
      lendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateOpenProxyPosition(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateOpenProxyShortPosition(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateOpenShortPosition(
      lendable: string,
      shortable: string,
      amount: BigNumberish,
      leverageFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateProxyBalance(
      lendable: string,
      proxyLendable: string,
      tradable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateProxyShortBalance(
      lendable: string,
      proxyLendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateShortBalance(
      lendable: string,
      shortable: string,
      trader: string,
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      request: {
        short: boolean;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      lendable: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositShortable(
      shortable: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fill(
      lendable: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPosition(
      trader: string,
      lendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProxyPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProxyShortPosition(
      trader: string,
      lendable: string,
      proxyLendable: string,
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getShortPosition(
      trader: string,
      lendable: string,
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    incentivize(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _reserveFactory: string,
      _pairFactory: string,
      _swapRouter: string,
      _WETH: string,
      _xWOW: string,
      _referralProgram: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      request: {
        amountIn: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openShortPosition(
      request: {
        amountIn: BigNumberish;
        baseBorrowAmount: BigNumberish;
        leverageFactor: BigNumberish;
        amountOutMin: BigNumberish;
        lendable: string;
        proxy: string;
        tradable: string;
        trader: string;
        deadline: BigNumberish;
        referrer: string;
        guardedPrice: {
          minDeposit: BigNumberish;
          minPrice: BigNumberish;
          maxPrice: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationConditions: {
          stopLossPercentage: BigNumberish;
          takeProfitPercentage: BigNumberish;
          deadline: BigNumberish;
          signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        };
        terminationReward: BigNumberish;
        convertFromNative: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pairFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      token: string,
      amount: BigNumberish,
      period: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepReserveFee(
      lendable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepShortingReserveFee(
      shortable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      request: {
        token: string;
        amount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        permit: { v: BigNumberish; r: BytesLike; s: BytesLike };
        convertToNative: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
