/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ErrorsInterface extends ethers.utils.Interface {
  functions: {
    "F_ALREADY_REGISTERED_LENDABLE()": FunctionFragment;
    "F_ALREADY_REGISTERED_TRADABLE()": FunctionFragment;
    "F_NOT_A_PAIR_FACTORY()": FunctionFragment;
    "F_NOT_A_RESERVE_FACTORY()": FunctionFragment;
    "F_NOT_LENDABLE_TOKEN()": FunctionFragment;
    "F_NOT_REGISTERED_PAIR()": FunctionFragment;
    "F_NOT_REGISTERED_TOKEN()": FunctionFragment;
    "F_NOT_SHORTABLE_TOKEN()": FunctionFragment;
    "F_NOT_TRADABLE_TOKEN()": FunctionFragment;
    "F_UNINITIALIZED_RESERVE()": FunctionFragment;
    "MATH_ADDITION_OVERFLOW()": FunctionFragment;
    "MATH_DIVISION_BY_ZERO()": FunctionFragment;
    "MATH_MULTIPLICATION_OVERFLOW()": FunctionFragment;
    "NON_REENTRANT_METHOD()": FunctionFragment;
    "PG_INVALID_FEED()": FunctionFragment;
    "PG_INVALID_STEPS()": FunctionFragment;
    "PG_UNKNOWN_FEED_TYPE()": FunctionFragment;
    "PG_UNKNOWN_IDENTITY()": FunctionFragment;
    "P_BORROW_LIMIT_EXCEEDED()": FunctionFragment;
    "P_DEBT_LEFT()": FunctionFragment;
    "P_FORBIDDEN_LIQUIDATION_CALLER()": FunctionFragment;
    "P_HEALTHY_POSITION_LIQUIDATION()": FunctionFragment;
    "P_INSUFFICIENT_LIQUIDITY()": FunctionFragment;
    "P_INSUFFICIENT_OUTPUT_AMOUNT()": FunctionFragment;
    "P_INSUFFICIENT_POSITION_DEPOSIT()": FunctionFragment;
    "P_INSUFFICIENT_WOW_BALANCE()": FunctionFragment;
    "P_INVALID_LEVERAGE_FACTOR()": FunctionFragment;
    "P_PRICE_THRESHOLD_OVERFLOW()": FunctionFragment;
    "RF_NOT_LENDABLE()": FunctionFragment;
    "RT_FORBIDDEN_TRANSFER()": FunctionFragment;
    "RT_PAIR_NOT_FOUND()": FunctionFragment;
    "RT_RESERVE_NOT_FOUND()": FunctionFragment;
    "R_INSUFFICIENT_BALANCE()": FunctionFragment;
    "R_INSUFFICIENT_LIQUIDITY()": FunctionFragment;
    "R_INVALID_DEPOSIT_AMOUNT()": FunctionFragment;
    "R_INVALID_PAIR()": FunctionFragment;
    "R_INVALID_REPAY_AMOUNT()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "F_ALREADY_REGISTERED_LENDABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_ALREADY_REGISTERED_TRADABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_NOT_A_PAIR_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_NOT_A_RESERVE_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_NOT_LENDABLE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_NOT_REGISTERED_PAIR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_NOT_REGISTERED_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_NOT_SHORTABLE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_NOT_TRADABLE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_UNINITIALIZED_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATH_ADDITION_OVERFLOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATH_DIVISION_BY_ZERO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MATH_MULTIPLICATION_OVERFLOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NON_REENTRANT_METHOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PG_INVALID_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PG_INVALID_STEPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PG_UNKNOWN_FEED_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PG_UNKNOWN_IDENTITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_BORROW_LIMIT_EXCEEDED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_DEBT_LEFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_FORBIDDEN_LIQUIDATION_CALLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_HEALTHY_POSITION_LIQUIDATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_INSUFFICIENT_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_INSUFFICIENT_OUTPUT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_INSUFFICIENT_POSITION_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_INSUFFICIENT_WOW_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_INVALID_LEVERAGE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "P_PRICE_THRESHOLD_OVERFLOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RF_NOT_LENDABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RT_FORBIDDEN_TRANSFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RT_PAIR_NOT_FOUND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RT_RESERVE_NOT_FOUND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_INSUFFICIENT_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_INSUFFICIENT_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_INVALID_DEPOSIT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_INVALID_PAIR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "R_INVALID_REPAY_AMOUNT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "F_ALREADY_REGISTERED_LENDABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_ALREADY_REGISTERED_TRADABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_NOT_A_PAIR_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_NOT_A_RESERVE_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_NOT_LENDABLE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_NOT_REGISTERED_PAIR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_NOT_REGISTERED_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_NOT_SHORTABLE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_NOT_TRADABLE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "F_UNINITIALIZED_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATH_ADDITION_OVERFLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATH_DIVISION_BY_ZERO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MATH_MULTIPLICATION_OVERFLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NON_REENTRANT_METHOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PG_INVALID_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PG_INVALID_STEPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PG_UNKNOWN_FEED_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PG_UNKNOWN_IDENTITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_BORROW_LIMIT_EXCEEDED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_DEBT_LEFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_FORBIDDEN_LIQUIDATION_CALLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_HEALTHY_POSITION_LIQUIDATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_INSUFFICIENT_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_INSUFFICIENT_OUTPUT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_INSUFFICIENT_POSITION_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_INSUFFICIENT_WOW_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_INVALID_LEVERAGE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "P_PRICE_THRESHOLD_OVERFLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RF_NOT_LENDABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RT_FORBIDDEN_TRANSFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RT_PAIR_NOT_FOUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RT_RESERVE_NOT_FOUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "R_INSUFFICIENT_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "R_INSUFFICIENT_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "R_INVALID_DEPOSIT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "R_INVALID_PAIR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "R_INVALID_REPAY_AMOUNT",
    data: BytesLike
  ): Result;

  events: {};
}

export class Errors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ErrorsInterface;

  functions: {
    F_ALREADY_REGISTERED_LENDABLE(overrides?: CallOverrides): Promise<[string]>;

    F_ALREADY_REGISTERED_TRADABLE(overrides?: CallOverrides): Promise<[string]>;

    F_NOT_A_PAIR_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    F_NOT_A_RESERVE_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    F_NOT_LENDABLE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    F_NOT_REGISTERED_PAIR(overrides?: CallOverrides): Promise<[string]>;

    F_NOT_REGISTERED_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    F_NOT_SHORTABLE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    F_NOT_TRADABLE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    F_UNINITIALIZED_RESERVE(overrides?: CallOverrides): Promise<[string]>;

    MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<[string]>;

    MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<[string]>;

    MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<[string]>;

    NON_REENTRANT_METHOD(overrides?: CallOverrides): Promise<[string]>;

    PG_INVALID_FEED(overrides?: CallOverrides): Promise<[string]>;

    PG_INVALID_STEPS(overrides?: CallOverrides): Promise<[string]>;

    PG_UNKNOWN_FEED_TYPE(overrides?: CallOverrides): Promise<[string]>;

    PG_UNKNOWN_IDENTITY(overrides?: CallOverrides): Promise<[string]>;

    P_BORROW_LIMIT_EXCEEDED(overrides?: CallOverrides): Promise<[string]>;

    P_DEBT_LEFT(overrides?: CallOverrides): Promise<[string]>;

    P_FORBIDDEN_LIQUIDATION_CALLER(
      overrides?: CallOverrides
    ): Promise<[string]>;

    P_HEALTHY_POSITION_LIQUIDATION(
      overrides?: CallOverrides
    ): Promise<[string]>;

    P_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<[string]>;

    P_INSUFFICIENT_OUTPUT_AMOUNT(overrides?: CallOverrides): Promise<[string]>;

    P_INSUFFICIENT_POSITION_DEPOSIT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    P_INSUFFICIENT_WOW_BALANCE(overrides?: CallOverrides): Promise<[string]>;

    P_INVALID_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<[string]>;

    P_PRICE_THRESHOLD_OVERFLOW(overrides?: CallOverrides): Promise<[string]>;

    RF_NOT_LENDABLE(overrides?: CallOverrides): Promise<[string]>;

    RT_FORBIDDEN_TRANSFER(overrides?: CallOverrides): Promise<[string]>;

    RT_PAIR_NOT_FOUND(overrides?: CallOverrides): Promise<[string]>;

    RT_RESERVE_NOT_FOUND(overrides?: CallOverrides): Promise<[string]>;

    R_INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<[string]>;

    R_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<[string]>;

    R_INVALID_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<[string]>;

    R_INVALID_PAIR(overrides?: CallOverrides): Promise<[string]>;

    R_INVALID_REPAY_AMOUNT(overrides?: CallOverrides): Promise<[string]>;
  };

  F_ALREADY_REGISTERED_LENDABLE(overrides?: CallOverrides): Promise<string>;

  F_ALREADY_REGISTERED_TRADABLE(overrides?: CallOverrides): Promise<string>;

  F_NOT_A_PAIR_FACTORY(overrides?: CallOverrides): Promise<string>;

  F_NOT_A_RESERVE_FACTORY(overrides?: CallOverrides): Promise<string>;

  F_NOT_LENDABLE_TOKEN(overrides?: CallOverrides): Promise<string>;

  F_NOT_REGISTERED_PAIR(overrides?: CallOverrides): Promise<string>;

  F_NOT_REGISTERED_TOKEN(overrides?: CallOverrides): Promise<string>;

  F_NOT_SHORTABLE_TOKEN(overrides?: CallOverrides): Promise<string>;

  F_NOT_TRADABLE_TOKEN(overrides?: CallOverrides): Promise<string>;

  F_UNINITIALIZED_RESERVE(overrides?: CallOverrides): Promise<string>;

  MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

  MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<string>;

  MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

  NON_REENTRANT_METHOD(overrides?: CallOverrides): Promise<string>;

  PG_INVALID_FEED(overrides?: CallOverrides): Promise<string>;

  PG_INVALID_STEPS(overrides?: CallOverrides): Promise<string>;

  PG_UNKNOWN_FEED_TYPE(overrides?: CallOverrides): Promise<string>;

  PG_UNKNOWN_IDENTITY(overrides?: CallOverrides): Promise<string>;

  P_BORROW_LIMIT_EXCEEDED(overrides?: CallOverrides): Promise<string>;

  P_DEBT_LEFT(overrides?: CallOverrides): Promise<string>;

  P_FORBIDDEN_LIQUIDATION_CALLER(overrides?: CallOverrides): Promise<string>;

  P_HEALTHY_POSITION_LIQUIDATION(overrides?: CallOverrides): Promise<string>;

  P_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<string>;

  P_INSUFFICIENT_OUTPUT_AMOUNT(overrides?: CallOverrides): Promise<string>;

  P_INSUFFICIENT_POSITION_DEPOSIT(overrides?: CallOverrides): Promise<string>;

  P_INSUFFICIENT_WOW_BALANCE(overrides?: CallOverrides): Promise<string>;

  P_INVALID_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<string>;

  P_PRICE_THRESHOLD_OVERFLOW(overrides?: CallOverrides): Promise<string>;

  RF_NOT_LENDABLE(overrides?: CallOverrides): Promise<string>;

  RT_FORBIDDEN_TRANSFER(overrides?: CallOverrides): Promise<string>;

  RT_PAIR_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

  RT_RESERVE_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

  R_INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<string>;

  R_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<string>;

  R_INVALID_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<string>;

  R_INVALID_PAIR(overrides?: CallOverrides): Promise<string>;

  R_INVALID_REPAY_AMOUNT(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    F_ALREADY_REGISTERED_LENDABLE(overrides?: CallOverrides): Promise<string>;

    F_ALREADY_REGISTERED_TRADABLE(overrides?: CallOverrides): Promise<string>;

    F_NOT_A_PAIR_FACTORY(overrides?: CallOverrides): Promise<string>;

    F_NOT_A_RESERVE_FACTORY(overrides?: CallOverrides): Promise<string>;

    F_NOT_LENDABLE_TOKEN(overrides?: CallOverrides): Promise<string>;

    F_NOT_REGISTERED_PAIR(overrides?: CallOverrides): Promise<string>;

    F_NOT_REGISTERED_TOKEN(overrides?: CallOverrides): Promise<string>;

    F_NOT_SHORTABLE_TOKEN(overrides?: CallOverrides): Promise<string>;

    F_NOT_TRADABLE_TOKEN(overrides?: CallOverrides): Promise<string>;

    F_UNINITIALIZED_RESERVE(overrides?: CallOverrides): Promise<string>;

    MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

    MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<string>;

    MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<string>;

    NON_REENTRANT_METHOD(overrides?: CallOverrides): Promise<string>;

    PG_INVALID_FEED(overrides?: CallOverrides): Promise<string>;

    PG_INVALID_STEPS(overrides?: CallOverrides): Promise<string>;

    PG_UNKNOWN_FEED_TYPE(overrides?: CallOverrides): Promise<string>;

    PG_UNKNOWN_IDENTITY(overrides?: CallOverrides): Promise<string>;

    P_BORROW_LIMIT_EXCEEDED(overrides?: CallOverrides): Promise<string>;

    P_DEBT_LEFT(overrides?: CallOverrides): Promise<string>;

    P_FORBIDDEN_LIQUIDATION_CALLER(overrides?: CallOverrides): Promise<string>;

    P_HEALTHY_POSITION_LIQUIDATION(overrides?: CallOverrides): Promise<string>;

    P_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<string>;

    P_INSUFFICIENT_OUTPUT_AMOUNT(overrides?: CallOverrides): Promise<string>;

    P_INSUFFICIENT_POSITION_DEPOSIT(overrides?: CallOverrides): Promise<string>;

    P_INSUFFICIENT_WOW_BALANCE(overrides?: CallOverrides): Promise<string>;

    P_INVALID_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<string>;

    P_PRICE_THRESHOLD_OVERFLOW(overrides?: CallOverrides): Promise<string>;

    RF_NOT_LENDABLE(overrides?: CallOverrides): Promise<string>;

    RT_FORBIDDEN_TRANSFER(overrides?: CallOverrides): Promise<string>;

    RT_PAIR_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

    RT_RESERVE_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

    R_INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<string>;

    R_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<string>;

    R_INVALID_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<string>;

    R_INVALID_PAIR(overrides?: CallOverrides): Promise<string>;

    R_INVALID_REPAY_AMOUNT(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    F_ALREADY_REGISTERED_LENDABLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    F_ALREADY_REGISTERED_TRADABLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    F_NOT_A_PAIR_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    F_NOT_A_RESERVE_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    F_NOT_LENDABLE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    F_NOT_REGISTERED_PAIR(overrides?: CallOverrides): Promise<BigNumber>;

    F_NOT_REGISTERED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    F_NOT_SHORTABLE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    F_NOT_TRADABLE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    F_UNINITIALIZED_RESERVE(overrides?: CallOverrides): Promise<BigNumber>;

    MATH_ADDITION_OVERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

    MATH_DIVISION_BY_ZERO(overrides?: CallOverrides): Promise<BigNumber>;

    MATH_MULTIPLICATION_OVERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

    NON_REENTRANT_METHOD(overrides?: CallOverrides): Promise<BigNumber>;

    PG_INVALID_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    PG_INVALID_STEPS(overrides?: CallOverrides): Promise<BigNumber>;

    PG_UNKNOWN_FEED_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    PG_UNKNOWN_IDENTITY(overrides?: CallOverrides): Promise<BigNumber>;

    P_BORROW_LIMIT_EXCEEDED(overrides?: CallOverrides): Promise<BigNumber>;

    P_DEBT_LEFT(overrides?: CallOverrides): Promise<BigNumber>;

    P_FORBIDDEN_LIQUIDATION_CALLER(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    P_HEALTHY_POSITION_LIQUIDATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    P_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    P_INSUFFICIENT_OUTPUT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    P_INSUFFICIENT_POSITION_DEPOSIT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    P_INSUFFICIENT_WOW_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    P_INVALID_LEVERAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    P_PRICE_THRESHOLD_OVERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

    RF_NOT_LENDABLE(overrides?: CallOverrides): Promise<BigNumber>;

    RT_FORBIDDEN_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    RT_PAIR_NOT_FOUND(overrides?: CallOverrides): Promise<BigNumber>;

    RT_RESERVE_NOT_FOUND(overrides?: CallOverrides): Promise<BigNumber>;

    R_INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    R_INSUFFICIENT_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    R_INVALID_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    R_INVALID_PAIR(overrides?: CallOverrides): Promise<BigNumber>;

    R_INVALID_REPAY_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    F_ALREADY_REGISTERED_LENDABLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_ALREADY_REGISTERED_TRADABLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_NOT_A_PAIR_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_NOT_A_RESERVE_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_NOT_LENDABLE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_NOT_REGISTERED_PAIR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_NOT_REGISTERED_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_NOT_SHORTABLE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_NOT_TRADABLE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_UNINITIALIZED_RESERVE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MATH_ADDITION_OVERFLOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MATH_DIVISION_BY_ZERO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MATH_MULTIPLICATION_OVERFLOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NON_REENTRANT_METHOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PG_INVALID_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PG_INVALID_STEPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PG_UNKNOWN_FEED_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PG_UNKNOWN_IDENTITY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_BORROW_LIMIT_EXCEEDED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_DEBT_LEFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    P_FORBIDDEN_LIQUIDATION_CALLER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_HEALTHY_POSITION_LIQUIDATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_INSUFFICIENT_LIQUIDITY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_INSUFFICIENT_OUTPUT_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_INSUFFICIENT_POSITION_DEPOSIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_INSUFFICIENT_WOW_BALANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_INVALID_LEVERAGE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    P_PRICE_THRESHOLD_OVERFLOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RF_NOT_LENDABLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RT_FORBIDDEN_TRANSFER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RT_PAIR_NOT_FOUND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RT_RESERVE_NOT_FOUND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    R_INSUFFICIENT_BALANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    R_INSUFFICIENT_LIQUIDITY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    R_INVALID_DEPOSIT_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    R_INVALID_PAIR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    R_INVALID_REPAY_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
