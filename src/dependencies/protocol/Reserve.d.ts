/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ReserveInterface extends ethers.utils.Interface {
  functions: {
    "REVISION()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(address,uint256,uint256)": FunctionFragment;
    "calculateBorrow(uint256,uint256)": FunctionFragment;
    "calculateDeposit(uint256)": FunctionFragment;
    "calculateWithdraw(uint256,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(address)": FunctionFragment;
    "fill()": FunctionFragment;
    "getAvailableLiquidity()": FunctionFragment;
    "getBorrowRate()": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getDebt(address,address)": FunctionFragment;
    "getDebtState(address,address)": FunctionFragment;
    "getLiquidityFeeAccrued()": FunctionFragment;
    "getLiquidityRate()": FunctionFragment;
    "getReserveDebt()": FunctionFragment;
    "getState()": FunctionFragment;
    "getTotalDebt()": FunctionFragment;
    "getTotalLiquidity()": FunctionFragment;
    "getUtilizationRate()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,string,string,address)": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "liquidityOf(address)": FunctionFragment;
    "migrate()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(address,address)": FunctionFragment;
    "shareOf(address)": FunctionFragment;
    "sweepFee()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferDebt(address,address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasurerUpdate()": FunctionFragment;
    "withdraw(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBorrow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [string]): string;
  encodeFunctionData(functionFragment: "fill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvailableLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDebt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtState",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityFeeAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(functionFragment: "liquidityOf", values: [string]): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "shareOf", values: [string]): string;
  encodeFunctionData(functionFragment: "sweepFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDebt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasurerUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebtState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityFeeAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasurerUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Fill(address,uint256)": EventFragment;
    "Liquidate(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Repay(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Reserve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReserveInterface;

  functions: {
    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      trader: string,
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateBorrow(
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { borrowRate: BigNumber }>;

    calculateDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateWithdraw(
      amount: BigNumberish,
      investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseBorrowRate: BigNumber;
          optimalSlope: BigNumber;
          excessSlope: BigNumber;
          optimalUtilization: BigNumber;
          treasureFactor: BigNumber;
        }
      ] & {
        config: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseBorrowRate: BigNumber;
          optimalSlope: BigNumber;
          excessSlope: BigNumber;
          optimalUtilization: BigNumber;
          treasureFactor: BigNumber;
        };
      }
    >;

    getDebt(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debt: BigNumber }>;

    getDebtState(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        current: BigNumber;
        rate: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    getLiquidityFeeAccrued(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserveDebt(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        averageRate: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUpdate: BigNumber;
        liquidity: BigNumber;
        liquidityRate: BigNumber;
        borrowRate: BigNumber;
        treasureAccrued: BigNumber;
        availableUnderlying: BigNumber;
      }
    >;

    getTotalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUtilizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      pairFactory_: string,
      param_provider: string,
      name_: string,
      symbol_: string,
      liquidityToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityOf(
      investor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      pair: string,
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareOf(investor: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    sweepFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferDebt(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasurerUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    trader: string,
    amount: BigNumberish,
    rateMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateBorrow(
    amount: BigNumberish,
    rateMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateDeposit(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateWithdraw(
    amount: BigNumberish,
    investor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    investor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseBorrowRate: BigNumber;
      optimalSlope: BigNumber;
      excessSlope: BigNumber;
      optimalUtilization: BigNumber;
      treasureFactor: BigNumber;
    }
  >;

  getDebt(
    pair: string,
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebtState(
    pair: string,
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      principal: BigNumber;
      current: BigNumber;
      rate: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  getLiquidityFeeAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityRate(overrides?: CallOverrides): Promise<BigNumber>;

  getReserveDebt(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      principalDebt: BigNumber;
      currentDebt: BigNumber;
      averageRate: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  getState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastUpdate: BigNumber;
      liquidity: BigNumber;
      liquidityRate: BigNumber;
      borrowRate: BigNumber;
      treasureAccrued: BigNumber;
      availableUnderlying: BigNumber;
    }
  >;

  getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  getUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    pairFactory_: string,
    param_provider: string,
    name_: string,
    symbol_: string,
    liquidityToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityOf(investor: string, overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    pair: string,
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareOf(investor: string, overrides?: CallOverrides): Promise<BigNumber>;

  sweepFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferDebt(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasurerUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    from: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      trader: string,
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateBorrow(
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdraw(
      amount: BigNumberish,
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(investor: string, overrides?: CallOverrides): Promise<void>;

    fill(overrides?: CallOverrides): Promise<void>;

    getAvailableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseBorrowRate: BigNumber;
        optimalSlope: BigNumber;
        excessSlope: BigNumber;
        optimalUtilization: BigNumber;
        treasureFactor: BigNumber;
      }
    >;

    getDebt(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtState(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        current: BigNumber;
        rate: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    getLiquidityFeeAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityRate(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveDebt(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        principalDebt: BigNumber;
        currentDebt: BigNumber;
        averageRate: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastUpdate: BigNumber;
        liquidity: BigNumber;
        liquidityRate: BigNumber;
        borrowRate: BigNumber;
        treasureAccrued: BigNumber;
        availableUnderlying: BigNumber;
      }
    >;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      pairFactory_: string,
      param_provider: string,
      name_: string,
      symbol_: string,
      liquidityToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(trader: string, overrides?: CallOverrides): Promise<void>;

    liquidityOf(
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareOf(investor: string, overrides?: CallOverrides): Promise<BigNumber>;

    sweepFee(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferDebt(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasurerUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Borrow(
      reserve?: string | null,
      trader?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reserve: string; trader: string; amount: BigNumber }
    >;

    Deposit(
      reserve?: string | null,
      investor?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reserve: string; investor: string; amount: BigNumber }
    >;

    Fill(
      reserve?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { reserve: string; amount: BigNumber }
    >;

    Liquidate(
      reserve?: string | null,
      trader?: string | null
    ): TypedEventFilter<[string, string], { reserve: string; trader: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Repay(
      reserve?: string | null,
      trader?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reserve: string; trader: string; amount: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Withdraw(
      reserve?: string | null,
      investor?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { reserve: string; investor: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      trader: string,
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateBorrow(
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdraw(
      amount: BigNumberish,
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getDebt(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtState(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityFeeAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityRate(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      pairFactory_: string,
      param_provider: string,
      name_: string,
      symbol_: string,
      liquidityToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityOf(
      investor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      pair: string,
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareOf(investor: string, overrides?: CallOverrides): Promise<BigNumber>;

    sweepFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferDebt(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasurerUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      trader: string,
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateBorrow(
      amount: BigNumberish,
      rateMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWithdraw(
      amount: BigNumberish,
      investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebt(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtState(
      pair: string,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityFeeAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      pairFactory_: string,
      param_provider: string,
      name_: string,
      symbol_: string,
      liquidityToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityOf(
      investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      pair: string,
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareOf(
      investor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweepFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferDebt(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasurerUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
