/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ParamProviderV1Interface extends ethers.utils.Interface {
  functions: {
    "REVISION()": FunctionFragment;
    "baseBorrowRate()": FunctionFragment;
    "excessSlope()": FunctionFragment;
    "initialize(address,tuple,tuple,tuple[])": FunctionFragment;
    "liquidationMargin()": FunctionFragment;
    "liquidationReward()": FunctionFragment;
    "maxLeverageFactor()": FunctionFragment;
    "maxLiquidationReward()": FunctionFragment;
    "maxRateMultiplier()": FunctionFragment;
    "minPositionDeposit()": FunctionFragment;
    "minWOWBalance(uint256)": FunctionFragment;
    "optimalSlope()": FunctionFragment;
    "optimalUtilization()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolUtilizationAllowance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBaseBorrowRate(uint256)": FunctionFragment;
    "setExcessSlope(uint256)": FunctionFragment;
    "setLiquidationMargin(uint256)": FunctionFragment;
    "setLiquidationReward(uint256)": FunctionFragment;
    "setMaxLeverageFactor(uint256)": FunctionFragment;
    "setMaxLiquidationReward(uint256)": FunctionFragment;
    "setMaxRateMultiplier(uint256)": FunctionFragment;
    "setMinPositionDeposit(uint256)": FunctionFragment;
    "setMinWOWBalance(uint256,uint256)": FunctionFragment;
    "setOptimalSlope(uint256)": FunctionFragment;
    "setOptimalUtilization(uint256)": FunctionFragment;
    "setParameters(tuple)": FunctionFragment;
    "setPoolUtilizationAllowance(uint256)": FunctionFragment;
    "setTraderProfitFee(uint256)": FunctionFragment;
    "setTreasureFactor(uint256)": FunctionFragment;
    "traderProfitFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasureFactor()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excessSlope",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      { maxLiquidationReward: BigNumberish; minPositionDeposit: BigNumberish },
      { leverageFactor: BigNumberish; minWOWBalance: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLeverageFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRateMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPositionDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWOWBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optimalSlope",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimalUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolUtilizationAllowance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseBorrowRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcessSlope",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverageFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidationReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRateMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWOWBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptimalSlope",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptimalUtilization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParameters",
    values: [
      {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolUtilizationAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderProfitFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasureFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "traderProfitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasureFactor",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPositionDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWOWBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimalUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolUtilizationAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcessSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWOWBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptimalSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptimalUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolUtilizationAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderProfitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasureFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderProfitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasureFactor",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ParamProviderV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ParamProviderV1Interface;

  functions: {
    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    excessSlope(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      owner: string,
      defaultParameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      defaultTokenParameters: {
        maxLiquidationReward: BigNumberish;
        minPositionDeposit: BigNumberish;
      },
      minWOWBalances: {
        leverageFactor: BigNumberish;
        minWOWBalance: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPositionDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optimalSlope(overrides?: CallOverrides): Promise<[BigNumber]>;

    optimalUtilization(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseBorrowRate(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExcessSlope(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationMargin(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationReward(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLiquidationReward(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRateMultiplier(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPositionDeposit(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinWOWBalance(
      leverageFactor: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptimalSlope(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptimalUtilization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParameters(
      parameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolUtilizationAllowance(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTraderProfitFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasureFactor(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    traderProfitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasureFactor(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    owner: string,
    defaultParameters: {
      baseBorrowRate: BigNumberish;
      optimalSlope: BigNumberish;
      excessSlope: BigNumberish;
      optimalUtilization: BigNumberish;
      treasureFactor: BigNumberish;
      poolUtilizationAllowance: BigNumberish;
      traderProfitFee: BigNumberish;
      liquidationMargin: BigNumberish;
      liquidationReward: BigNumberish;
      maxLeverageFactor: BigNumberish;
      maxRateMultiplier: BigNumberish;
    },
    defaultTokenParameters: {
      maxLiquidationReward: BigNumberish;
      minPositionDeposit: BigNumberish;
    },
    minWOWBalances: {
      leverageFactor: BigNumberish;
      minWOWBalance: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  minWOWBalance(
    leverageFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

  optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseBorrowRate(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExcessSlope(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationMargin(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationReward(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLeverageFactor(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLiquidationReward(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRateMultiplier(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPositionDeposit(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinWOWBalance(
    leverageFactor: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptimalSlope(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptimalUtilization(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParameters(
    parameters: {
      baseBorrowRate: BigNumberish;
      optimalSlope: BigNumberish;
      excessSlope: BigNumberish;
      optimalUtilization: BigNumberish;
      treasureFactor: BigNumberish;
      poolUtilizationAllowance: BigNumberish;
      traderProfitFee: BigNumberish;
      liquidationMargin: BigNumberish;
      liquidationReward: BigNumberish;
      maxLeverageFactor: BigNumberish;
      maxRateMultiplier: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolUtilizationAllowance(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTraderProfitFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasureFactor(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner: string,
      defaultParameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      defaultTokenParameters: {
        maxLiquidationReward: BigNumberish;
        minPositionDeposit: BigNumberish;
      },
      minWOWBalances: {
        leverageFactor: BigNumberish;
        minWOWBalance: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseBorrowRate(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExcessSlope(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationMargin(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationReward(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLiquidationReward(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRateMultiplier(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPositionDeposit(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWOWBalance(
      leverageFactor: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptimalSlope(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptimalUtilization(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParameters(
      parameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolUtilizationAllowance(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderProfitFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasureFactor(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    baseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    excessSlope(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner: string,
      defaultParameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      defaultTokenParameters: {
        maxLiquidationReward: BigNumberish;
        minPositionDeposit: BigNumberish;
      },
      minWOWBalances: {
        leverageFactor: BigNumberish;
        minWOWBalance: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationMargin(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minPositionDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimalSlope(overrides?: CallOverrides): Promise<BigNumber>;

    optimalUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolUtilizationAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseBorrowRate(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExcessSlope(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationMargin(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationReward(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLiquidationReward(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRateMultiplier(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPositionDeposit(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinWOWBalance(
      leverageFactor: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptimalSlope(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptimalUtilization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParameters(
      parameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolUtilizationAllowance(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTraderProfitFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasureFactor(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    traderProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasureFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excessSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      defaultParameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      defaultTokenParameters: {
        maxLiquidationReward: BigNumberish;
        minPositionDeposit: BigNumberish;
      },
      minWOWBalances: {
        leverageFactor: BigNumberish;
        minWOWBalance: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverageFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidationReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRateMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPositionDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWOWBalance(
      leverageFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimalSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimalUtilization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolUtilizationAllowance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseBorrowRate(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExcessSlope(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationMargin(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationReward(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLeverageFactor(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLiquidationReward(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRateMultiplier(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPositionDeposit(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinWOWBalance(
      leverageFactor: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptimalSlope(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptimalUtilization(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParameters(
      parameters: {
        baseBorrowRate: BigNumberish;
        optimalSlope: BigNumberish;
        excessSlope: BigNumberish;
        optimalUtilization: BigNumberish;
        treasureFactor: BigNumberish;
        poolUtilizationAllowance: BigNumberish;
        traderProfitFee: BigNumberish;
        liquidationMargin: BigNumberish;
        liquidationReward: BigNumberish;
        maxLeverageFactor: BigNumberish;
        maxRateMultiplier: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolUtilizationAllowance(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTraderProfitFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasureFactor(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    traderProfitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasureFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
