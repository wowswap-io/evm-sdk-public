/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ReferralInterface extends ethers.utils.Interface {
  functions: {
    "REVISION()": FunctionFragment;
    "availableClaim(address,address)": FunctionFragment;
    "availableIncentivize(address)": FunctionFragment;
    "calculateRewards(address,address,uint256)": FunctionFragment;
    "claim(address,address)": FunctionFragment;
    "claimAll(address)": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "claimed(address,address)": FunctionFragment;
    "distributeReward(address,address,uint256)": FunctionFragment;
    "distributeRewardIncentivized(address,address,uint256)": FunctionFragment;
    "getReferral(bytes32)": FunctionFragment;
    "getReferrer(address)": FunctionFragment;
    "incentivize(address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isReferrer(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairFactory()": FunctionFragment;
    "paramProvider()": FunctionFragment;
    "referrals(address)": FunctionFragment;
    "register()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPairFactory(address)": FunctionFragment;
    "setReferral(address,address)": FunctionFragment;
    "setReferralAdmin(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasurer()": FunctionFragment;
    "wow()": FunctionFragment;
    "xwow()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableClaim",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "availableIncentivize",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "claimAll", values: [string]): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewardIncentivized",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getReferrer", values: [string]): string;
  encodeFunctionData(functionFragment: "incentivize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isReferrer", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paramProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "referrals", values: [string]): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPairFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasurer", values?: undefined): string;
  encodeFunctionData(functionFragment: "wow", values?: undefined): string;
  encodeFunctionData(functionFragment: "xwow", values?: undefined): string;

  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableIncentivize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewardIncentivized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isReferrer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paramProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasurer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xwow", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Referral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReferralInterface;

  functions: {
    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableClaim(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    availableIncentivize(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRewards(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        reward1: BigNumber;
        reward2: BigNumber;
        reward3: BigNumber;
      }
    >;

    claim(
      trader: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAll(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimed(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributeReward(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeRewardIncentivized(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReferral(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber] & {
          referral: string;
          blocknumber: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        found: [string, BigNumber, BigNumber] & {
          referral: string;
          blocknumber: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    getReferrer(referral: string, overrides?: CallOverrides): Promise<[string]>;

    incentivize(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      paramProvider: string,
      pairFactory: string,
      lendableProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isReferrer(referrer: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairFactory(overrides?: CallOverrides): Promise<[string]>;

    paramProvider(overrides?: CallOverrides): Promise<[string]>;

    referrals(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          referral: string;
          blocknumber: BigNumber;
          timestamp: BigNumber;
        })[]
      ] & {
        found: ([string, BigNumber, BigNumber] & {
          referral: string;
          blocknumber: BigNumber;
          timestamp: BigNumber;
        })[];
      }
    >;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairFactory(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferral(
      referrer: string,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralAdmin(
      referrer: string,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasurer(overrides?: CallOverrides): Promise<[string]>;

    wow(overrides?: CallOverrides): Promise<[string]>;

    xwow(overrides?: CallOverrides): Promise<[string]>;
  };

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  availableClaim(
    trader: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  availableIncentivize(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewards(
    trader: string,
    token: string,
    volume: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      reward1: BigNumber;
      reward2: BigNumber;
      reward3: BigNumber;
    }
  >;

  claim(
    trader: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAll(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimed(
    trader: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributeReward(
    trader: string,
    token: string,
    volume: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeRewardIncentivized(
    trader: string,
    token: string,
    volume: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReferral(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      referral: string;
      blocknumber: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getReferrer(referral: string, overrides?: CallOverrides): Promise<string>;

  incentivize(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    paramProvider: string,
    pairFactory: string,
    lendableProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isReferrer(referrer: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairFactory(overrides?: CallOverrides): Promise<string>;

  paramProvider(overrides?: CallOverrides): Promise<string>;

  referrals(
    referrer: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      referral: string;
      blocknumber: BigNumber;
      timestamp: BigNumber;
    })[]
  >;

  register(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairFactory(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferral(
    referrer: string,
    referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralAdmin(
    referrer: string,
    referral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasurer(overrides?: CallOverrides): Promise<string>;

  wow(overrides?: CallOverrides): Promise<string>;

  xwow(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    availableClaim(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableIncentivize(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        reward1: BigNumber;
        reward2: BigNumber;
        reward3: BigNumber;
      }
    >;

    claim(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAll(trader: string, overrides?: CallOverrides): Promise<void>;

    claimable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimed(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeReward(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeRewardIncentivized(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferral(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        referral: string;
        blocknumber: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getReferrer(referral: string, overrides?: CallOverrides): Promise<string>;

    incentivize(token: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      paramProvider: string,
      pairFactory: string,
      lendableProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isReferrer(referrer: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairFactory(overrides?: CallOverrides): Promise<string>;

    paramProvider(overrides?: CallOverrides): Promise<string>;

    referrals(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        referral: string;
        blocknumber: BigNumber;
        timestamp: BigNumber;
      })[]
    >;

    register(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPairFactory(value: string, overrides?: CallOverrides): Promise<void>;

    setReferral(
      referrer: string,
      referral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralAdmin(
      referrer: string,
      referral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasurer(overrides?: CallOverrides): Promise<string>;

    wow(overrides?: CallOverrides): Promise<string>;

    xwow(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    availableClaim(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    availableIncentivize(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      trader: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAll(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimed(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeReward(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeRewardIncentivized(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReferral(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getReferrer(
      referral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivize(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      paramProvider: string,
      pairFactory: string,
      lendableProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isReferrer(referrer: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairFactory(overrides?: CallOverrides): Promise<BigNumber>;

    paramProvider(overrides?: CallOverrides): Promise<BigNumber>;

    referrals(referrer: string, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairFactory(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferral(
      referrer: string,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralAdmin(
      referrer: string,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasurer(overrides?: CallOverrides): Promise<BigNumber>;

    wow(overrides?: CallOverrides): Promise<BigNumber>;

    xwow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableClaim(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableIncentivize(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      trader: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      trader: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeReward(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewardIncentivized(
      trader: string,
      token: string,
      volume: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReferral(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrer(
      referral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivize(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      paramProvider: string,
      pairFactory: string,
      lendableProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isReferrer(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrals(
      referrer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairFactory(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferral(
      referrer: string,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralAdmin(
      referrer: string,
      referral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasurer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xwow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
