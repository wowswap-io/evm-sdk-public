/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPairFactoryV1Interface extends ethers.utils.Interface {
  functions: {
    "getAllTradables()": FunctionFragment;
    "getOrCreatePair(address,address)": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "pairBytecodeHash()": FunctionFragment;
    "registerTradable(address)": FunctionFragment;
    "registerTradables(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllTradables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrCreatePair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pairBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerTradable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTradables",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllTradables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrCreatePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTradable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTradables",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPairFactoryV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPairFactoryV1Interface;

  functions: {
    getAllTradables(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOrCreatePair(
      lendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPair(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isPair(pair: string, overrides?: CallOverrides): Promise<[boolean]>;

    pairBytecodeHash(overrides?: CallOverrides): Promise<[string]>;

    registerTradable(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerTradables(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAllTradables(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOrCreatePair(
    lendable: string,
    tradable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPair(
    lendable: string,
    tradable: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

  pairBytecodeHash(overrides?: CallOverrides): Promise<string>;

  registerTradable(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerTradables(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllTradables(overrides?: CallOverrides): Promise<string[]>;

    getOrCreatePair(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPair(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isPair(pair: string, overrides?: CallOverrides): Promise<boolean>;

    pairBytecodeHash(overrides?: CallOverrides): Promise<string>;

    registerTradable(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerTradables(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getAllTradables(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOrCreatePair(
      lendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPair(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPair(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    registerTradable(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerTradables(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllTradables(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOrCreatePair(
      lendable: string,
      tradable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPair(
      lendable: string,
      tradable: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPair(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairBytecodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerTradable(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerTradables(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
