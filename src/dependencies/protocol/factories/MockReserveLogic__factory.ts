/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockReserveLogic,
  MockReserveLogicInterface,
} from "../MockReserveLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "excessSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalUtilization",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "treasureFactor",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "excessSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalUtilization",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "treasureFactor",
        type: "uint256",
      },
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161016d38038061016d833981810160405260a081101561003357600080fd5b508051602080830151604080850151606080870151608097880151845160a08101865288815296870186905293860183905290850181905293909501819052600a93909355600b55600c92909255600d91909155600e5560d5806100986000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633f72092214602d575b600080fd5b605f600480360360a0811015604157600080fd5b50803590602081013590604081013590606081013590608001356061565b005b6040805160a0810182528681526020810186905290810184905260608101839052608001819052600a94909455600b92909255600c55600d55600e5556fea26469706673582212204645fc92eeea03111bf6271904b35fe89d487797494d8a57b460348d3b8d1ac564736f6c63430007040033";

export class MockReserveLogic__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    baseBorrowRate: BigNumberish,
    optimalSlope: BigNumberish,
    excessSlope: BigNumberish,
    optimalUtilization: BigNumberish,
    treasureFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockReserveLogic> {
    return super.deploy(
      baseBorrowRate,
      optimalSlope,
      excessSlope,
      optimalUtilization,
      treasureFactor,
      overrides || {}
    ) as Promise<MockReserveLogic>;
  }
  getDeployTransaction(
    baseBorrowRate: BigNumberish,
    optimalSlope: BigNumberish,
    excessSlope: BigNumberish,
    optimalUtilization: BigNumberish,
    treasureFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      baseBorrowRate,
      optimalSlope,
      excessSlope,
      optimalUtilization,
      treasureFactor,
      overrides || {}
    );
  }
  attach(address: string): MockReserveLogic {
    return super.attach(address) as MockReserveLogic;
  }
  connect(signer: Signer): MockReserveLogic__factory {
    return super.connect(signer) as MockReserveLogic__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockReserveLogicInterface {
    return new utils.Interface(_abi) as MockReserveLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockReserveLogic {
    return new Contract(address, _abi, signerOrProvider) as MockReserveLogic;
  }
}
