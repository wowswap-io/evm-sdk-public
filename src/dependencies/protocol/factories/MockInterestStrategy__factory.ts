/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockInterestStrategy,
  MockInterestStrategyInterface,
} from "../MockInterestStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "excessSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalUtilization",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "treasureFactor",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "utilization",
        type: "uint256",
      },
    ],
    name: "borrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgBorrowRate",
        type: "uint256",
      },
    ],
    name: "calculateInterestRates",
    outputs: [
      {
        internalType: "uint256",
        name: "liqRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "overallRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "utilization",
        type: "uint256",
      },
    ],
    name: "liquidityRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgRate",
        type: "uint256",
      },
    ],
    name: "overallBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseBorrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "excessSlope",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optimalUtilization",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "treasureFactor",
        type: "uint256",
      },
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "utilization",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "";

export class MockInterestStrategy__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    baseBorrowRate: BigNumberish,
    optimalSlope: BigNumberish,
    excessSlope: BigNumberish,
    optimalUtilization: BigNumberish,
    treasureFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockInterestStrategy> {
    return super.deploy(
      baseBorrowRate,
      optimalSlope,
      excessSlope,
      optimalUtilization,
      treasureFactor,
      overrides || {}
    ) as Promise<MockInterestStrategy>;
  }
  getDeployTransaction(
    baseBorrowRate: BigNumberish,
    optimalSlope: BigNumberish,
    excessSlope: BigNumberish,
    optimalUtilization: BigNumberish,
    treasureFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      baseBorrowRate,
      optimalSlope,
      excessSlope,
      optimalUtilization,
      treasureFactor,
      overrides || {}
    );
  }
  attach(address: string): MockInterestStrategy {
    return super.attach(address) as MockInterestStrategy;
  }
  connect(signer: Signer): MockInterestStrategy__factory {
    return super.connect(signer) as MockInterestStrategy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockInterestStrategyInterface {
    return new utils.Interface(_abi) as MockInterestStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockInterestStrategy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockInterestStrategy;
  }
}
