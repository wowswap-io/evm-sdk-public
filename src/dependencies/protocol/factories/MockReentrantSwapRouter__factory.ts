/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockReentrantSwapRouter,
  MockReentrantSwapRouterInterface,
} from "../MockReentrantSwapRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pancakeRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pair",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_shorting",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "callClosePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "callLiquidatePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "callOpenPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b9d380380610b9d83398101604081905261002f916100c1565b600080546001600160a01b0319166001600160a01b0385161790556004805460ff1916821580159190911790915561008157600280546001600160a01b0319166001600160a01b03841617905561009d565b600180546001600160a01b0319166001600160a01b0384161790555b50505061010b565b80516001600160a01b03811681146100bc57600080fd5b919050565b6000806000606084860312156100d5578283fd5b6100de846100a5565b92506100ec602085016100a5565b915060408401518015158114610100578182fd5b809150509250925092565b610a838061011a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631af3088b1461005c578063480a66e8146100665780635c11d7951461006e5780637bcd31d914610081578063d06ca61f14610089575b600080fd5b6100646100b2565b005b6100646100c9565b61006461007c3660046107ab565b6100e4565b61006461055b565b61009c610097366004610761565b610571565b6040516100a99190610984565b60405180910390f35b6d21a627a9a2afa827a9a4aa24a7a760911b600355565b712624a8aaa4a220aa22afa827a9a4aa24a7a760711b600355565b6003546c27a822a72fa827a9a4aa24a7a760991b14156102a75760045460ff16156101d8576002546040805160a0810182526000808252602080830182905282840182905260608084018390528451908101855282815290810182905280840182905260808301529151632ee8761960e11b81526001600160a01b0390931692635dd0ec3292610180929091829182918291829160040161093e565b602060405180830381600087803b15801561019a57600080fd5b505af11580156101ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d29190610749565b506102a2565b6001546040805160a0810182526000808252602080830182905282840182905260608084018390528451908101855282815290810182905280840182905260808301529151631fa6429f60e11b81526001600160a01b0390931692633f4c853e9261024e92909182918291829190600401610900565b602060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610749565b505b61039b565b6003546d21a627a9a2afa827a9a4aa24a7a760911b14156102f557600154604051630e85fc3f60e31b81526001600160a01b039091169063742fe1f89061024e9060009081906004016108e7565b600354712624a8aaa4a220aa22afa827a9a4aa24a7a760711b141561039b5760015460405163586e848f60e01b81526001600160a01b039091169063586e848f906103479060009081906004016108a9565b602060405180830381600087803b15801561036157600080fd5b505af1158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190610729565b505b838360008181106103a857fe5b90506020020160208101906103bd9190610667565b6001600160a01b03166323b872dd3330896040518463ffffffff1660e01b81526004016103ec939291906108c3565b602060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190610729565b508383600081811061044c57fe5b90506020020160208101906104619190610667565b60005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610494929116908a906004016108e7565b602060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190610729565b50600054604051635c11d79560e01b81526001600160a01b0390911690635c11d79590610521908990899089908990899089906004016109eb565b600060405180830381600087803b15801561053b57600080fd5b505af115801561054f573d6000803e3d6000fd5b50505050505050505050565b6c27a822a72fa827a9a4aa24a7a760991b600355565b60005460405163d06ca61f60e01b81526060916001600160a01b03169063d06ca61f906105a6908790879087906004016109c8565b60006040518083038186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105fa9190810190610688565b949350505050565b80356001600160a01b038116811461061957600080fd5b919050565b60008083601f84011261062f578182fd5b50813567ffffffffffffffff811115610646578182fd5b602083019150836020808302850101111561066057600080fd5b9250929050565b600060208284031215610678578081fd5b61068182610602565b9392505050565b6000602080838503121561069a578182fd5b825167ffffffffffffffff808211156106b1578384fd5b818501915085601f8301126106c4578384fd5b8151818111156106d057fe5b83810291506106e0848301610a29565b8181528481019084860184860187018a10156106fa578788fd5b8795505b8386101561071c5780518352600195909501949186019186016106fe565b5098975050505050505050565b60006020828403121561073a578081fd5b81518015158114610681578182fd5b60006020828403121561075a578081fd5b5051919050565b600080600060408486031215610775578182fd5b83359250602084013567ffffffffffffffff811115610792578283fd5b61079e8682870161061e565b9497909650939450505050565b60008060008060008060a087890312156107c3578182fd5b8635955060208701359450604087013567ffffffffffffffff8111156107e7578283fd5b6107f389828a0161061e565b9095509350610806905060608801610602565b9150608087013590509295509295509295565b60008284526020808501945082825b85811015610854576001600160a01b0361084183610602565b1687529582019590820190600101610828565b509495945050505050565b80518252602081015160208301526040810151604083015260608101516060830152608081015160ff8151166080840152602081015160a0840152604081015160c0840152505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0386811682526020820186905260408201859052831660608201526101608101610934608083018461085f565b9695505050505050565b6001600160a01b03878116825260208201879052604082018690526060820185905283166080820152610180810161097960a083018461085f565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156109bc578351835292840192918401916001016109a0565b50909695505050505050565b6000848252604060208301526109e2604083018486610819565b95945050505050565b600087825286602083015260a06040830152610a0b60a083018688610819565b6001600160a01b039490941660608301525060800152949350505050565b60405181810167ffffffffffffffff81118282101715610a4557fe5b60405291905056fea26469706673582212206e98523c3cb2d4e0cc43ce4be908765c8f2ac2101e7954667b5b2102fe00dcb664736f6c63430007040033";

export class MockReentrantSwapRouter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _pancakeRouter: string,
    _pair: string,
    _shorting: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockReentrantSwapRouter> {
    return super.deploy(
      _pancakeRouter,
      _pair,
      _shorting,
      overrides || {}
    ) as Promise<MockReentrantSwapRouter>;
  }
  getDeployTransaction(
    _pancakeRouter: string,
    _pair: string,
    _shorting: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _pancakeRouter,
      _pair,
      _shorting,
      overrides || {}
    );
  }
  attach(address: string): MockReentrantSwapRouter {
    return super.attach(address) as MockReentrantSwapRouter;
  }
  connect(signer: Signer): MockReentrantSwapRouter__factory {
    return super.connect(signer) as MockReentrantSwapRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockReentrantSwapRouterInterface {
    return new utils.Interface(_abi) as MockReentrantSwapRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockReentrantSwapRouter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockReentrantSwapRouter;
  }
}
